#!/bin/bash
############################################################################
# This file is part of Grenache Command Line Interface.                    #
#                                                                          #
# Copyright (C) 2017, 2018 Davide Scola <davide@bitfinex.com>              #
#                                                                          #
# Licensed under the Apache License,  Version 2.0 (the "License"); you may #
# not use this file except in  compliance with the License. You may obtain #
# a copy of the License at                                                 #
#                                                                          #
#       http://www.apache.org/licenses/LICENSE-2.0                         #
#                                                                          #
# Unless  required by  applicable law  or agreed  to in  writing, software #
# distributed  under the  License  is  distributed on  an  "AS IS"  BASIS, #
# WITHOUT  WARRANTIES  OR  CONDITIONS  OF  ANY  KIND,  either  express  or #
# implied. See the License for the specific language governing permissions #
# and limitations under the License.                                       #
############################################################################

readonly ME="${BASH_SOURCE[0]}"
readonly WHOAMI="$(@READLINK@ -snf "${ME}")"
readonly ARGV=$(@GETOPT@ -o 'g:hip:trvw' --long 'grape:,help,id,port:,tls,raw,value,write' -n "${ME##*/}" -- "$@") || exit 1

TLS=''
PORT=30002
EXIT_CODE=1
HOSTNAME='127.0.0.1'
QUERY='select(.v) | .v'


# Show program's help.
function show_help {
  @CAT@ <<_EOF
Usage:
    ${ME##*/} [OPTIONS] <value>... -- send a GET request to the DHT

    Options:

        -g, --grape             Set the Grape hostname
        -i. --id                Get the id of sending node
        -p, --port              Set the Grape port number
        -t, --tls               Enable TLS
        -r, --raw               Get the raw response message
        -v, --value             Get the stored value
        -w, --write             Get the write token

        -h, --help              Show this message

    The order of the specified options is not relevant.
_EOF

  exit 1
}


while true; do
  case "$1" in
    -g | --grape )
      [[ -z "${2}" ]] && {
        echo "${ME##*/}: error: empty Grape hostname." >&2
        exit 1
      }

      HOSTNAME="${2}"; shift 2
      ;;
    -h | --help )
      show_help; shift 1
      ;;
    -i | --id )
      QUERY='select(.id) | .id'; shift 1
      ;;
    -p | --port )
      [[ "${2}" =~ ^[0-9]+$ ]] || {
        echo "${ME##*/}: error: invalid Grape port number." >&2
        exit 1
      }

      [[ "$((${2} & 0xFFFF))" -eq 0 ]] && {
        echo "${ME##*/}: error: Grape port number must be greater than zero." >&2
        exit 1
      }

      [[ "${2}" -ne "$((${2} & 0xFFFF))" ]] && {
        echo "${ME##*/}: error: Grape port number too big." >&2
        exit 1
      }

      PORT="$((${2} & 0xFFFF))"; shift 2
      ;;
    -t | --tls )
      TLS='yes'; shift 1
      ;;
    -r | --raw )
      QUERY='select(.)'; shift 1
      ;;
    -v | --value )
      QUERY='select(.v) | .v'; shift 1
      ;;
    -w | --write )
      QUERY='select(.token) | .token'; shift 1
      ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done


[[ "${#}" -lt 1 ]] && {
  show_help
}

[[ -f "${HOME}/.grenache-cli/grenache-cli.conf" ]] || {
  echo "${ME##*/}: error: you need to run \`grenache-keygen' first." >&2
  exit 1
}

exec {stderr}>&2

[[ x"${GRENACHE_CLI_DEBUG:+set}" != xset ]] && {
  exec 2>/dev/null
}

for hash in "${@}"
do
  [[ "${hash}" =~ ^[a-fA-F0-9]{40}$ ]] || {
    echo "${ME##*/}: warning: invalid hash provided: ${hash}." >&"${stderr}"
    continue
  }

  JSON="$(@CURL@ -qK "${HOME}/.grenache-cli/grenache-cli.conf" -A '@PACKAGE@/@PACKAGE_VERSION@' "http${TLS:+s}://${HOSTNAME}:${PORT}/get" < <( \
    @JQ@ -cnM \
      --arg 'data' "${hash}" \
      --arg 'rid' "$(@UUIDGEN@)" \
      '{ "data": $data, "rid": $rid }' \
  ))"

  [[ -z "${JSON}" ]] && {
    echo "${ME##*/}: warning: hash ${hash} not found." >&"${stderr}"
    continue
  }

  @JQ@ -e 'has("k")' >/dev/null <<<"${JSON}" && {
    CHALLENGE=''

    @JQ@ -e 'has("salt")' >/dev/null <<<"${JSON}" && {
      CHALLENGE+="$(@JQ@ -j '"4:salt\(.salt | length):\(.salt)"' <<<"${JSON}")"
    }

    CHALLENGE+="$(@JQ@ -j '"3:seqi" + "\(.seq)" + "e1:v" + "\(.v | length):\(.v)"' <<<"${JSON}")"

    ${WHOAMI%/*}/grc-verify "${CHALLENGE}" \
      @PKEY_FILENO@< <( \
        @JQ@ -r 'select(.k) | .k' <<<"${JSON}"
      ) \
      @SIGN_FILENO@< <( \
        @JQ@ -r 'select(.sig) | .sig' <<<"${JSON}"
      ) >/dev/null || {
      echo "${ME##*/}: warning: cannot verify challenge buffer." >&"${stderr}"
      continue
    }

    CHECK="$(@SHA1SUM@ < <( \
      printf '%s' \
        "$(@XXD@ -r -p < <( @JQ@ -r 'select(.k) | .k' <<<"${JSON}" ))" \
        "$(@JQ@ -r 'select(.salt) | .salt' <<<"${JSON}")"
    ))"
  } || {
    CHECK="$(@SHA1SUM@ < <( \
      @JQ@ -j 'select(.v) | "\(.v | length):\(.v)"' <<<"${JSON}"
    ))"
  }

  [[ "x${hash}" = "x${CHECK%% *}" ]] || {
    echo "${ME##*/}: warning: unexpected value." >&"${stderr}"
    continue
  }

  @JQ@ -r "${QUERY}" <<<"${JSON}" \
    && EXIT_CODE=0
done

exec {stderr}>&-
exit "${EXIT_CODE}"
