#!/bin/bash
############################################################################
# This file is part of Grenache Command Line Interface.                    #
#                                                                          #
# Copyright (C) 2017-2021 Davide Scola <davide@bitfinex.com>               #
#                                                                          #
# Licensed under the Apache License,  Version 2.0 (the "License"); you may #
# not use this file except in  compliance with the License. You may obtain #
# a copy of the License at                                                 #
#                                                                          #
#       http://www.apache.org/licenses/LICENSE-2.0                         #
#                                                                          #
# Unless  required by  applicable law  or agreed  to in  writing, software #
# distributed  under the  License  is  distributed on  an  "AS IS"  BASIS, #
# WITHOUT  WARRANTIES  OR  CONDITIONS  OF  ANY  KIND,  either  express  or #
# implied. See the License for the specific language governing permissions #
# and limitations under the License.                                       #
############################################################################

readonly ME="${BASH_SOURCE[0]}"
readonly WHOAMI="$(@READLINK@ -snf "${ME}")"
readonly ARGV=$(@GETOPT@ -o 'g:hip:trs:vVw' --long 'grape:,help,id,port:,tls,raw,salt:,value,version,write' -n "${ME##*/}" -- "$@") || exit 1

TLS=''
SALT=''
PORT=30002
HOSTNAME='127.0.0.1'
QUERY='select(.v) | .v'


# Show program's help.
function show_help {
  @CAT@ <<_EOF
${ME##*/} sends a GET request to the DHT

Usage: ${ME##*/} [OPTION]... HASH

Options:
    -g, --grape                Set the Grape hostname
    -i. --id                   Get the id of sending node
    -p, --port                 Set the Grape port number
    -t, --tls                  Enable TLS
    -r, --raw                  Get the raw response message
    -s, --salt                 Set salt for this request
    -v, --value                Get the stored value
    -w, --write                Get the write token

    -h, --help                 Show help message
    -V, --version              Show version information

Examples:
    ${ME##*/} foo           Read value whose hash is foo from the DHT
    ${ME##*/} -s bar foo    The same thing, using bar as salt

Report bugs to <@PACKAGE_BUGREPORT@>.
_EOF

  exit 1
}

# Show program's version.
function show_version {
  @CAT@ <<_EOF
${WHOAMI##*/} (@PACKAGE_NAME@) @PACKAGE_VERSION@ for @host_cpu@-@host_os@

Copyright (C) 2017-2021 Davide Scola <@PACKAGE_BUGREPORT@>
This is free software; see the  source for copying conditions.  There is
NO warranty;  not even for  MERCHANTABILITY or FITNESS FOR  A PARTICULAR
PURPOSE.

Written by Davide Scola.
_EOF

  exit 1
}


while true; do
  case "$1" in
    -g | --grape )
      [[ -z "${2}" ]] && {
        echo "${ME##*/}: error: empty Grape hostname." >&2
        exit 1
      }

      HOSTNAME="${2}"; shift 2
      ;;
    -h | --help )
      show_help; shift 1
      ;;
    -i | --id )
      QUERY='select(.id) | .id'; shift 1
      ;;
    -p | --port )
      [[ "${2}" =~ ^[0-9]+$ ]] || {
        echo "${ME##*/}: error: invalid Grape port number." >&2
        exit 1
      }

      [[ "$((${2} & 0xFFFF))" -eq 0 ]] && {
        echo "${ME##*/}: error: Grape port number must be greater than zero." >&2
        exit 1
      }

      [[ "${2}" -ne "$((${2} & 0xFFFF))" ]] && {
        echo "${ME##*/}: error: Grape port number too big." >&2
        exit 1
      }

      PORT="$((${2} & 0xFFFF))"; shift 2
      ;;
    -t | --tls )
      TLS='yes'; shift 1
      ;;
    -r | --raw )
      QUERY='select(.)'; shift 1
      ;;
    -s | --salt )
      [[ -z "${2}" ]] && {
        echo "${ME##*/}: error: empty salt string." >&2
        exit 1
      }

      [[ "${#2}" -gt 64 ]] && {
        echo "${ME##*/}: error: salt is too big." >&2
        exit 1
      }

      SALT="${2}"; shift 2
      ;;
    -v | --value )
      QUERY='select(.v) | .v'; shift 1
      ;;
    -V | --version )
      show_version; shift 1
      ;;
    -w | --write )
      QUERY='select(.token) | .token'; shift 1
      ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done


[[ "${#}" -lt 1 ]] && {
  show_help
}

[[ -f "${HOME}/.grenache-cli/grenache-cli.conf" ]] || {
  echo "${ME##*/}: error: you need to run \`grenache-keygen' first." >&2
  exit 1
}

HASH="${1}"
exec {stderr}>&2

[[ x"${GRENACHE_CLI_DEBUG:+set}" != xset ]] && {
  exec 2>/dev/null
}

[[ "${HASH}" =~ ^[a-fA-F0-9]{40}$ ]] || {
  echo "${ME##*/}: error: invalid hash provided: ${HASH}." >&"${stderr}"

  exec {stderr}>&-
  exit 1
}

JSON="$(@CURL@ -qK "${HOME}/.grenache-cli/grenache-cli.conf" -A '@PACKAGE@/@PACKAGE_VERSION@' "http${TLS:+s}://${HOSTNAME}:${PORT}/get" < <( \
  @JQ@ -cnM \
    --arg 'hash' "${HASH}" \
    --arg 'salt' "${SALT:-}" \
    --arg 'rid' "$(@UUIDGEN@)" \
    '{ "data": { "hash": $hash, "salt": $salt }, "rid": $rid }'
))"

[[ -z "${JSON}" ]] && {
  echo "${ME##*/}: error: hash ${HASH} not found." >&"${stderr}"

  exec {stderr}>&-
  exit 1
}

@JQ@ -e 'has("k")' >/dev/null <<<"${JSON}" && {
  CHALLENGE=''

  [[ -z "${SALT}" ]] || {
    @JQ@ -e 'has("salt")' >/dev/null <<<"${JSON}" && {
      GRENACHE_SALT="$(@JQ@ -r '.salt' <<<"${JSON}")"

      [[ "${GRENACHE_SALT}" = "${SALT}" ]] || {
        echo "${ME##*/}: error: salt mismatch." >&"${stderr}"

        exec {stderr}>&-
        exit 1
      }
    }

    CHALLENGE+="4:salt${#SALT}:${SALT}"
  }

  CHALLENGE+="$(@JQ@ -j '"3:seqi" + "\(.seq)" + "e1:v" + "\(.v | length):\(.v)"' <<<"${JSON}")"

  ${WHOAMI%/*}/grc-verify "${CHALLENGE}" \
    @PKEY_FILENO@< <( \
      @JQ@ -r 'select(.k) | .k' <<<"${JSON}"
    ) \
    @SIGN_FILENO@< <( \
      @JQ@ -r 'select(.sig) | .sig' <<<"${JSON}"
    ) >/dev/null || {
    echo "${ME##*/}: error: cannot verify challenge buffer." >&"${stderr}"

    exec {stderr}>&-
    exit 1
  }

  CHECK="$(@SHA1SUM@ < <( \
    printf '%s' \
      "$(@XXD@ -r -p < <( @JQ@ -r 'select(.k) | .k' <<<"${JSON}" ))" \
      "${SALT:-}"
  ))"
} || {
  CHECK="$(@SHA1SUM@ < <( \
    @JQ@ -j 'select(.v) | "\(.v | length):\(.v)"' <<<"${JSON}"
  ))"
}

[[ "x${HASH}" = "x${CHECK%% *}" ]] || {
  echo "${ME##*/}: error: unexpected value." >&"${stderr}"

  exec {stderr}>&-
  exit 1
}

@JQ@ -cMr "${QUERY}" <<<"${JSON}"

exec {stderr}>&-
exit 0
