#!/bin/bash
############################################################################
# This file is part of Grenache Command Line Interface.                    #
#                                                                          #
# Copyright (C) 2017, 2018 Davide Scola <davide@bitfinex.com>              #
#                                                                          #
# Licensed under the Apache License,  Version 2.0 (the "License"); you may #
# not use this file except in  compliance with the License. You may obtain #
# a copy of the License at                                                 #
#                                                                          #
#       http://www.apache.org/licenses/LICENSE-2.0                         #
#                                                                          #
# Unless  required by  applicable law  or agreed  to in  writing, software #
# distributed  under the  License  is  distributed on  an  "AS IS"  BASIS, #
# WITHOUT  WARRANTIES  OR  CONDITIONS  OF  ANY  KIND,  either  express  or #
# implied. See the License for the specific language governing permissions #
# and limitations under the License.                                       #
############################################################################

readonly ME="${BASH_SOURCE[0]}"
readonly WHOAMI="$(@READLINK@ -snf "${ME}")"
readonly ARGV=$(@GETOPT@ -o 'd:g:hjp:tV' --long 'delimiter:,grape:,help,json,port:,tls,version' -n "${ME##*/}" -- "$@") || exit 1

TLS=''
PORT=30002
JQ_QUERY=''
EXIT_CODE=1
DELIMITER=','
HOSTNAME='127.0.0.1'
JQ_ARGV=(--unbuffered -r)


# Show program's help.
function show_help {
  @CAT@ <<_EOF
${ME##*/} announces a service on the DHT

Usage: ${ME##*/} [OPTION]... [SERVICE]...

Options:
    -d, --delimiter            Set the service,port delimiter
    -g, --grape                Set the Grape hostname
    -j, --json                 Use JSON as data serializer
    -p, --port                 Set the Grape port number
    -t, --tls                  Enable TLS

    -h, --help                 Show help message
    -V, --version              Show version information

Examples:
    ${ME##*/}          Announce services from stdin
    ${ME##*/} -d/      The same thing, but use / as delimiter

Report bugs to <@PACKAGE_BUGREPORT@>.
_EOF

  exit 1
}

# Show program's version.
function show_version {
  @CAT@ <<_EOF
${WHOAMI##*/} (@PACKAGE_NAME@) @PACKAGE_VERSION@ for @host_cpu@-@host_os@

Copyright (C) 2017, 2018 Davide Scola <@PACKAGE_BUGREPORT@>
This is free software; see the  source for copying conditions.  There is
NO warranty;  not even for  MERCHANTABILITY or FITNESS FOR  A PARTICULAR
PURPOSE.

Written by Davide Scola.
_EOF

  exit 1
}


while true; do
  case "$1" in
    -d | --delimiter )
      [[ -z "${2}" ]] && {
        echo "${ME##*/}: error: empty delimiter." >&2
        exit 1
      }

      DELIMITER="${2}"; shift 2
      ;;
    -g | --grape )
      [[ -z "${2}" ]] && {
        echo "${ME##*/}: error: empty Grape hostname." >&2
        exit 1
      }

      HOSTNAME="${2}"; shift 2
      ;;
    -h | --help )
      show_help; shift 1
      ;;
    -j | --json )
      JQ_QUERY='select(.data) | (.data[0] + "\t" + (.data[1] | tostring))'; shift 1
      ;;
    -p | --port )
      [[ "${2}" =~ ^[0-9]+$ ]] || {
        echo "${ME##*/}: error: invalid Grape port number." >&2
        exit 1
      }

      [[ "$((${2} & 0xFFFF))" -eq 0 ]] && {
        echo "${ME##*/}: error: Grape port number must be greater than zero." >&2
        exit 1
      }

      [[ "${2}" -ne "$((${2} & 0xFFFF))" ]] && {
        echo "${ME##*/}: error: Grape port number too big." >&2
        exit 1
      }

      PORT="$((${2} & 0xFFFF))"; shift 2
      ;;
    -t | --tls )
      TLS='yes'; shift 1
      ;;
    -V | --version )
      show_version; shift 1
      ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done


[[ -f "${HOME}/.grenache-cli/grenache-cli.conf" ]] || {
  echo "${ME##*/}: error: you need to run \`grenache-keygen' first." >&2
  exit 1
}

exec {stderr}>&2

[[ x"${GRENACHE_CLI_DEBUG:+set}" != xset ]] && {
  exec 2>/dev/null
}

[[ -z "${JQ_QUERY}" ]] && {
  JQ_ARGV+=(-R)
  JQ_QUERY="$(printf 'split("%s") | (.[0] + "\t" + .[1])' "${DELIMITER}")"
}

while read service port
do
  [[ -n "${service}" ]] || {
    echo "${ME##*/}: warning: empty service name, skipping." >&"${stderr}"
    continue
  }

  [[ "$((${port} & 0xFFFF))" -gt 0 && "${port}" -eq "$((${port} & 0xFFFF))" ]] || {
    echo "${ME##*/}: warning: invalid port number, skipping." >&"${stderr}"
    continue
  }

  NODES="$(@JQ@ -r '.' < <(
    @CURL@ -qK "${HOME}/.grenache-cli/grenache-cli.conf" -A '@PACKAGE@/@PACKAGE_VERSION@' "http${TLS:+s}://${HOSTNAME}:${PORT}/announce" < <( \
      @JQ@ -cnM \
        --arg 'port' "${port}" \
        --arg 'service' "${service}" \
        --arg 'rid' "$(@UUIDGEN@)" \
          '{ "data": [$service, ($port | tonumber)], "rid": $rid }' \
    ) \
  ))"

  [[ "${NODES}" =~ ^[0-9]+$ ]] || {
    echo "${ME##*/}: warning: unable to announce service ${service}: ${NODES}." >&"${stderr}"
    continue
  }

  [[ "${NODES}" -gt 0 ]] && { \
    EXIT_CODE=0
  } || { \
    echo "${ME##*/}: warning: service ${service} has not been indexed." >&"${stderr}"
  }
done < <(
  @JQ@ "${JQ_ARGV[@]}" "${JQ_QUERY}" < <( \
    [[ "${#}" -eq 0 ]] \
      && @SED@ -u 's/\s*[#;].*$//;/^\s*$/d' - \
      || printf '%s\n' "${@}"
  )
)

exec {stderr}>&-
exit "${EXIT_CODE}"
